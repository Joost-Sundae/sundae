import { FungibleResourcesCollection, FungibleResourcesCollectionItemVaultAggregated, NonFungibleResourcesCollection, NonFungibleResourcesCollectionItemVaultAggregated, StateApi, StateEntityDetailsResponseItem } from '../generated';
type ReplaceItems<T, U> = Omit<T, 'items'> & {
    items: U[];
};
export type FungibleResourcesVaultCollection = ReplaceItems<FungibleResourcesCollection, FungibleResourcesCollectionItemVaultAggregated>;
export type NonFungibleResourcesVaultCollection = ReplaceItems<NonFungibleResourcesCollection, NonFungibleResourcesCollectionItemVaultAggregated>;
export type StateEntityDetailsVaultResponseItem = StateEntityDetailsResponseItem & {
    fungible_resources: FungibleResourcesVaultCollection;
    non_fungible_resources: NonFungibleResourcesVaultCollection;
};
export declare class State {
    innerClient: StateApi;
    constructor(innerClient: StateApi);
    /**
     * Get detailed information about entities together with vault aggregated fungible and non-fungible resources.
     * Returns array or single item depending on input value
     *
     * @example
     * const entityDetails = await gatewayApi.state.getEntityDetailsVaultAggregated('account_tdx_21_1p823h2sq7nsefkdharvvh5')
     * console.log(entityDetails.fungible_resources.items, entityDetails.non_fungible_resources.items)
     *
     * @example
     * const entities = await gatewayApi.state.getEntityDetailsVaultAggregated(['account_tdx_21_1p823h2sq7nsefkdharvvh5'])
     * console.log(entities[0].fungible_resources.items, entities[0].non_fungible_resources.items)
     */
    getEntityDetailsVaultAggregated(addresses: string): Promise<StateEntityDetailsVaultResponseItem>;
    getEntityDetailsVaultAggregated(addresses: string[]): Promise<StateEntityDetailsVaultResponseItem[]>;
}
export {};
